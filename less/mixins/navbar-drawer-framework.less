// Framework for dwanvas grid generation
// Parallel to the grid framework of bootstrap
// uses any value of `@grid-columns`

.make-navbar-drawer-columns() {
    // Common styles for all sizes of grid columns, widths 1-12
    .dw(@index) { // initial
        @item: ~".navbar-drawer-xs.dw-xs-@{index}, .navbar-drawer-sm.dw-sm-@{index}, .navbar-drawer-md.dw-md-@{index}, .navbar-drawer-lg.dw-lg-@{index}";
        .dw((@index + 1), @item);
    }
    .dw(@index, @list) when (@index =< @grid-columns) { // general; "=<" isn't a typo
        .dw((@index + 1), ~"@{list}, @{item}");
    }
    .dw(@index, @list) when (@index > @grid-columns) { // terminal
        @{list} {
            // position: fixed;
            // Prevent columns from collapsing when empty
            min-height: 100%;
        }
    }

    .dw(1);
}

.calc-navbar-drawer-column(@index, @class, @type) when (@type = width) and (@index > 0) {

  .navbar-drawer-@{class}.dw-@{class}-@{index} {
    width: percentage((@index / @grid-columns));
  }

  .navbar-drawer-@{class} {
    &.fold.dw-@{class}-@{index} {
      margin-left: -1 * percentage((@index / @grid-columns));;
      margin-right: 0;
    }

    &.folding.dw-@{class}-@{index} {
        position: fixed;
        height: 100%;
        .transition-property(~"margin-left");
        .transition-duration(.35s);
        .transition-timing-function(ease);
    }

    &.drawer-right {
      &.fold.dw-@{class}-@{index} {
        margin-left: 0;
        margin-right: -1 * percentage((@index / @grid-columns));
      }

      &.fold.dw-@{class}-@{index} {
        .transition-property(~"margin-right");
      }
    }

    &.fold.open.dw-@{class}-@{index},
    &.drawer-right.fold.open.dw-@{class}-@{index} {
      margin-right: 0;
      margin-left: 0;
    }
  }
}

// Basic looping in LESS
.loop-navbar-drawer-columns(@index, @class, @type) when (@index >= 0) {
  .calc-navbar-drawer-column(@index, @class, @type);
  // next iteration
  .loop-navbar-drawer-columns((@index - 1), @class, @type);
}

// Create grid for specific class
.make-navbar-drawer(@class) {
  // .float-dwanvas-columns(@class);
  .loop-navbar-drawer-columns(@grid-columns, @class, width);
  // .loop-drawer-columns(@grid-columns, @class, pull);
  // .loop-drawer-columns(@grid-columns, @class, push);
  // .loop-drawer-columns(@grid-columns, @class, offset);
}

.hidden-override() {
    display: none;
    visibility: hidden;
}

.visible-override(@display: block) {
    display: @display;
    visibility: visible;
}

.navbar-overrides() {
    position: fixed;
    height: 100%;

    .container {
      padding-left: 0;
      padding-right: 0;
    }

    .navbar-header {
        .drawer-heading();
        border-bottom: none;

        .navbar-toggle {
            .hidden-override();
        }
    }

    .navbar-collapse,
    .nav.navbar-nav {
        .drawer-nav();
    }

    .drawer-controls, 
    .navbar-collapse.collapse {
      .visible-override();
    }
}

.navbar-reset() {
    position: relative;
    height: auto;
    min-height: @navbar-height;
    width: 100%;

    &.fold {
        margin-left: 0;
        margin-right: 0;
    }

    .navbar-header {
        border-bottom: none;
        padding: inherit;
        color: inherit;

        .navbar-toggle {
            .visible-override();
        }
    }

    .drawer-controls, 
    .navbar-collapse.collapse {
        .hidden-override();
    }
}